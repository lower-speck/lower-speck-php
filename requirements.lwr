
1. A class MUST exist to parse a Lower Speck file, grep a codebase, and return information about it.

    1.a. The class MUST expect the Lower Speck file to be named `requirements.lwr` and reside at the base path of the project.

    1.b. The class SHOULD expect a config file named `lower-speck.json` to reside at the base path of the project.
        1.b.a. The class SHOULD expect the config file to contain an object in JSON format.
        1.b.b. The class SHOULD expect the object's key named `paths` to have an array of strings.

    1.c. The class MUST use default values if the `lower-speck.json` file is absent.

    1.d. The class MUST parse the `requirements.lwr` file into an appropriate structure.

    1.e. The class constructor MUST accept parameters.
        1.e.a. The class constructor MUST accept a base path as its first parameter.
        1.e.b. The class MUST accept an ID as an optional parameter to its checking method.

    1.f. The class MUST grep the directories from the `paths` array (or else the root) recursively to find strings referencing the requirements from the `requirements.lwr` file.
        1.f.a. If an ID was supplied as an argument, the class MAY only search for that requirement and its sub-requirements.

    1.g. The class MUST return an analysis of the requirements and state of code.
        1.g.a. If an ID was supplied as an argument, the class MUST only give analysis relative to that requirement and its sub-requirements.
        1.g.b. The analysis MUST include progress as the percentage of requirements that have been addressed.
        1.g.c. The analysis MUST include the number of requirements that are not obsolete. 
        1.g.d. The analysis MUST include the number of requirements that have been addressed and are not obsolete.
        1.g.e. The analysis SHOULD include the number of requirements that are obsolete.

        1.g.f. The analysis MUST output the following information about each requirement it includes.
            1.g.f.a. The analysis MUST include a warning with any requirements that do not use the keywords defined in RFC 2119.
            1.g.f.b. The analysis MUST include a warning with any requirements that use unknown flags that do not begin with a dash (-).
            1.g.f.c. The analysis MUST include a warning with any requirements that are incomplete.
            1.g.f.d. The analysis MUST include an error with any requirements that cannot be parsed.
                1.g.f.d.a. The analysis MUST include parse errors even for requirements that do not fall within the super ID supplied to the class.
            1.g.f.e. The analysis MUST include an error with any requirement immediately following a gap.
            1.g.f.f. The analysis MUST include an error with any requirement with an ID that is duplicated.
            1.g.f.g. The analysis MUST include an error with any requirement that is out of order.
            1.g.f.h. The analysis MUST include a flag with any requirements that are not addressed.
            1.g.f.i. The analysis MUST include a flag with any requirements that are obsoleted.

2. This package MUST provide a script to run the class and output the results.

    2.a. The script MUST output a description of the code's references to the requirements.
        2.a.a. The script SHOULD output the number of warnings due to missing RFC 2119 keywords.
        2.a.b. The script SHOULD output the number of warnings due to unexpected custom flags.
        2.a.c. The script SHOULD output the number of errors due to failure to parse.
        2.a.d. The script SHOULD output the number of errors due to gaps.
        2.a.e. The script SHOULD output the number of duplicate ID's.
        2.a.f. The script SHOULD output the number of errors due to requirements being out of order.

        2.a.g. The analysis MUST include a list of the requirements according to the following rules:
            2.a.g.a. Repeated blank lines SHOULD be collapsed to one.
            2.a.g.b. Leading and trailing blank lines SHOULD not be returned in the analysis.
            
    2.b. The script MUST output requirements according to a verbosity level.
        2.b.a. The script MUST accept verbosity flags `-v` and `-vv`.
        2.b.b. In normal mode and above the script MUST output any requirements that are not addressed and not obsolete as well as any incomplete requirements that are addressed and not obsolete.
        2.b.c. In verbose mode and above the script MUST output all requirements that are not obsolete.
        2.b.d. In double-verbose mode and above the script MUST output all requirements.

